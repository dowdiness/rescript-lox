// Generated by ReScript, PLEASE EDIT WITH CARE

import * as LoxError from "./loxError.bs.js";

var Value = {};

function makeScanner(source) {
  return {
          source: source,
          tokens: [],
          start: 0,
          current: 0,
          line: 1
        };
}

function isAtEnd(scanner) {
  return scanner.current >= scanner.source.length;
}

function advanceScanner(scanner) {
  return {
          source: scanner.source,
          tokens: scanner.tokens,
          start: scanner.start,
          current: scanner.current + 1 | 0,
          line: scanner.line
        };
}

function getChar(scanner) {
  if (scanner.current > scanner.source.length) {
    return ;
  } else {
    return scanner.source[scanner.current - 1 | 0];
  }
}

function getLexeme(scanner) {
  return scanner.source.substring(scanner.start, scanner.current);
}

function addToken(scanner, tokenType) {
  var token_lexeme = getLexeme(scanner);
  var token_line = scanner.line;
  var token = {
    tokenType: tokenType,
    lexeme: token_lexeme,
    literal: /* LoxNil */0,
    line: token_line
  };
  return {
          source: scanner.source,
          tokens: scanner.tokens.concat([token]),
          start: scanner.start,
          current: scanner.current,
          line: scanner.line
        };
}

function addDoubleToken(scanner, doubleToken, singleToken) {
  var c = getChar(advanceScanner(scanner));
  if (c === "=") {
    return addToken(advanceScanner(scanner), doubleToken);
  } else {
    return addToken(scanner, singleToken);
  }
}

function scanToken(scanner) {
  var scanner$1 = advanceScanner(scanner);
  var c = getChar(scanner$1);
  if (c === undefined) {
    return scanner$1;
  }
  switch (c) {
    case "!" :
        return addDoubleToken(scanner$1, /* BangEqual */12, /* Bang */11);
    case "(" :
        return addToken(scanner$1, /* LeftParen */0);
    case ")" :
        return addToken(scanner$1, /* RightParen */1);
    case "*" :
        return addToken(scanner$1, /* Star */10);
    case "+" :
        return addToken(scanner$1, /* Plus */7);
    case "," :
        return addToken(scanner$1, /* Comma */4);
    case "-" :
        return addToken(scanner$1, /* Minus */6);
    case "." :
        return addToken(scanner$1, /* Dot */5);
    case ";" :
        return addToken(scanner$1, /* Semicolon */8);
    case "<" :
        return addDoubleToken(scanner$1, /* LessEqual */18, /* Less */17);
    case "=" :
        return addDoubleToken(scanner$1, /* EqualEqual */14, /* Equal */13);
    case ">" :
        return addDoubleToken(scanner$1, /* GreaterEqual */16, /* Greater */15);
    case "\n" :
        return {
                source: scanner$1.source,
                tokens: scanner$1.tokens,
                start: scanner$1.start,
                current: scanner$1.current,
                line: scanner$1.line + 1 | 0
              };
    case " " :
    case "\r" :
    case "\t" :
        return scanner$1;
    case "{" :
        return addToken(scanner$1, /* LeftBrace */2);
    case "}" :
        return addToken(scanner$1, /* RightBrace */3);
    default:
      LoxError.error(String(scanner$1.line), "Unexpected character.");
      return scanner$1;
  }
}

function scanTokens(_scanner) {
  while(true) {
    var scanner = _scanner;
    if (isAtEnd(scanner)) {
      var token_line = scanner.line;
      var token = {
        tokenType: /* Eof */38,
        lexeme: "",
        literal: /* LoxNil */0,
        line: token_line
      };
      return scanner.tokens.concat([token]);
    }
    var scanner_source = scanner.source;
    var scanner_tokens = scanner.tokens;
    var scanner_start = scanner.current;
    var scanner_current = scanner.current;
    var scanner_line = scanner.line;
    var scanner$1 = {
      source: scanner_source,
      tokens: scanner_tokens,
      start: scanner_start,
      current: scanner_current,
      line: scanner_line
    };
    _scanner = scanToken(scanner$1);
    continue ;
  };
}

function tokenTypeToString(tokenType) {
  switch (tokenType) {
    case /* LeftParen */0 :
        return "LeftParen";
    case /* RightParen */1 :
        return "RightParen";
    case /* LeftBrace */2 :
        return "LeftBrace";
    case /* RightBrace */3 :
        return "RightBrace";
    case /* Comma */4 :
        return "Comma";
    case /* Dot */5 :
        return "Dot";
    case /* Minus */6 :
        return "Minus";
    case /* Plus */7 :
        return "Plus";
    case /* Semicolon */8 :
        return "Semicolon";
    case /* Slash */9 :
        return "Slash";
    case /* Star */10 :
        return "Star";
    case /* Bang */11 :
        return "Bang";
    case /* BangEqual */12 :
        return "BangEqual";
    case /* Equal */13 :
        return "Equal";
    case /* EqualEqual */14 :
        return "EqualEqual";
    case /* Greater */15 :
        return "Greater";
    case /* GreaterEqual */16 :
        return "GreaterEqual";
    case /* Less */17 :
        return "Less";
    case /* LessEqual */18 :
        return "LessEqual";
    case /* Identifier */19 :
        return "Identifier";
    case /* String */20 :
        return "String";
    case /* Number */21 :
        return "Number";
    case /* And */22 :
        return "And";
    case /* Class */23 :
        return "Class";
    case /* Else */24 :
        return "Else";
    case /* False */25 :
        return "False";
    case /* Fun */26 :
        return "Fun";
    case /* For */27 :
        return "For";
    case /* If */28 :
        return "If";
    case /* Nil */29 :
        return "Nil";
    case /* Or */30 :
        return "Or";
    case /* Print */31 :
        return "Print";
    case /* Return */32 :
        return "Return";
    case /* Super */33 :
        return "Super";
    case /* This */34 :
        return "This";
    case /* True */35 :
        return "True";
    case /* Var */36 :
        return "Var";
    case /* While */37 :
        return "While";
    case /* Eof */38 :
        return "Eof";
    
  }
}

function tokenToString(token) {
  return tokenTypeToString(token.tokenType) + ", " + token.lexeme + ", " + String(token.literal);
}

var tokens = scanTokens({
      source: "((!*+-=<> <= =====))",
      tokens: [],
      start: 0,
      current: 0,
      line: 1
    });

console.log(tokens.map(tokenToString));

export {
  Value ,
  makeScanner ,
  isAtEnd ,
  advanceScanner ,
  getChar ,
  getLexeme ,
  addToken ,
  addDoubleToken ,
  scanToken ,
  scanTokens ,
  tokenTypeToString ,
  tokenToString ,
  tokens ,
}
/* tokens Not a pure module */
